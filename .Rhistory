qqplot
?qqplot
require(graphics)
y <- rt(200, df = 5)
qqnorm(y); qqline(y, col = 2)
qqplot(y, rt(300, df = 5))
islands
hist(islands)
require(plyr)
total_steps_perday
total_steps_perday
plot(total_steps_perday)
?plot
plot(total_steps_perday, type="s")
plot(total_steps_perday, type="o")
require(stats)
plot(cars)
plot(total_steps_perday)
?plot
plot(total_steps_perday, type="l")
hist(total_steps_perday$sum)
?hist
hist(total_steps_perday$sum, freq=FALSE)
hist(total_steps_perday$sum, freq=true)
hist(total_steps_perday$sum)
?report
??report
mean(total_steps_perday)
mean(total_steps_perday$sum)
median(total_steps_perday$sum)
head(activity)
head(activity , 30)
ddply(activity, .(interval), summarize, sum = sum(steps, na.rm=TRUE))
ddply(activity, .(interval), summarize, mean = mean(steps, na.rm=TRUE))
?ddply
ddply(activity, .(interval), summarize, mean = mean(steps, na.rm=TRUE))
average_steps_interval <- ddply(activity, .(interval), summarize, mean = mean(steps, na.rm=TRUE))
average_steps_interval
plot(average_steps_interval)
plot(average_steps_interval,type="l")
?plot
plot(average_steps_interval,type="l", xlab="5-minute interval", ylab="Average number of steps")
max(average_steps_interval$mean)
average_steps_interval$mean == max(average_steps_interval$mean)
average_steps_interval[average_steps_interval$mean == max(average_steps_interval$mean)]
average_steps_interval[average_steps_interval$mean == max(average_steps_interval$mean),]
average_steps_interval[average_steps_interval$mean == max(average_steps_interval$mean),]
?is.na
is.na(activity$steps)
is.na(activity$steps)
is.true
summary(is.na(activity$steps))
is.na(activity$steps)
?summary
factor
facotr(is.na(activity$steps))
factor(is.na(activity$steps))
is.na(activity$steps)
descriptiom
describe
summary(is.na(activity$steps))
summary(is.na(activity$steps)==TUR)
summary(is.na(activity$steps)==TURE)
is.na(activity$steps)==TURE
activity[is.na(activity$steps),]
count(activity[is.na(activity$steps),])
count(activity[is.na(activity$steps),])
?count
?sum
sum(activity[is.na(activity$steps),])
rnum(activity[is.na(activity$steps),])
nrow(activity[is.na(activity$steps),])
summary(is.na(activity$steps)==TURE)
summary(is.na(activity$steps))
na.rm
na
is.na
average_steps_interval
head(activity)
head(average_steps_interval)
average
?transform
?tapply
require(stats)
groups <- as.factor(rbinom(32, n =5 , prob = 0.4))
groups
tapply(groups, groups, length)
table(groups)
table(groups)
fac
num
5-minute
table(groups)
table(groups)
table(groups)
?transform
transform(airqulity, new = -Ozone)
transfomr(airquality, new = -Ozone)
transfomr(airquality, new = -Ozone)
transform(airquality, new = -Ozone)
transform(airquality, new = -Ozone)
airquality
airquality
airquality
airquality
airquality
airquality
airquality
airquality
airquality
airquality
airquality
airquality
transform(airquality, new = -Ozone)
View(activity)
acitivity
activity
activity()
activity
activity()
activity()
activity
activity
head(average_steps_interval)
head(activity)
?ttaply
tapply
?tapply
require(stats)
groups <- as.factor(rbinom(32, n = 5, prob = 0.4))
tapply(groups, groups, length)
groups
tapply(warpbreaks$breaks, warpbreaks[, 3, drop = FALSE], sum)
?transform
attach(activity)
steps
steps
attach(activity)
steps
is.na(steps)
activity[is.na(steps),]
steps[is.na(steps)]
steps[is.na(steps),]
steps[is.na(steps)]
number(steps[is.na(steps)])
?num
??num
length
length(steps[is.na(steps)])
length(steps)
length(steps[is.na(steps)])
is.na(steps)
length(steps[is.na(steps)])
steps[is.na(steps)]
head(steps[is.na(steps)],)
fill_na <- function(step, step_mean){
if(is.na(step)){
step_mean
}else{
step
}
}
fill_na(NA,1)
fill_na(3,1)
steps
?transform
average_steps_interval
fill_na <- function(step, interval){
step_mean = average_steps_interval[(average_steps_interval$interval == interval),]
if(is.na(step)){
step_mean
}else{
step
}
}
fill_na(1,5)
fill_na(NA,5)
fill_na <- function(step, interval){
step_mean = average_steps_interval[(average_steps_interval$interval == interval),mean]
if(is.na(step)){
step_mean
}else{
step
}
}
fill_na(NA,5)
average_steps_interval[(average_steps_interval$interval == 5),]
average_steps_interval[(average_steps_interval$interval == 5),"mean"]
average_steps_interval[(average_steps_interval$interval == 5),]
average_steps_interval[(average_steps_interval$interval == 5),]
fill_na <- function(step, interval){
step_mean = average_steps_interval[(average_steps_interval$interval == interval),"mean"]
if(is.na(step)){
step_mean
}else{
step
}
}
fill_na(4,6)
fill_na(NA,10)
x = fill_na(steps, interval)
transform(activity, steps = fill_na(steps, interval))
transform(activity, steps = fill_na(steps, interval))
?ddaply
?ddply
?ddply
ddply(dfx, .(group, sex), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
sd
sd
sd
sd
sd
sd
for
()
?for
:
??for
;
for(x in average_steps_interval){}
for(x in average_steps_interval){
x
}
for(x in 1:10){x
}
steps
for(step in steps){
print(step)
}
for(x in average_steps_interval){
print(x)}
fill_na_array <- function(steps, intervals){
number = 0
new_steps = steps
for(step in steps){
number = number +1
new_steps[number] <- fill_na(steps[number], intervals[number])
}
new_steps
}
fill_na_array(step, interval)
step
steps
interval
fill_na_array(steps, interval)
new_steps <- fill_na_array(steps, interval)
new_steps[1:10]
steps[1:10]
interval[1:10]
average_steps_interval[1:10]
average_steps_interval[1:10,]
transform(activity, steps = fill_na_array(steps, interval))
transform(activity, steps = fill_na_array(steps, interval))
head(activity)
new_activity
new_activity <- transform(activity, steps = fill_na_array(steps, interval))
new_activity
?weekdays
Sys.Date()
weekdays(Sys.Date())
weekdays(Sys.Date())
weekdays(Sys.Date())
new_activity$date
class(new_activity$date)
?as.date
?date
weekdays
?convert
?format
?format
as.Date
?as.Date
as.Date(new_activity$date)
new_activity$date <- as.Date(new_activity$date)
new_activity$day <- weekdays(new_activity$date)
head(new_activity)
return_day <- function(date){
day ="weekday"
if(weekdays(date) == "星期日"||weekdays(date) =="星期六"){
day = "weekend"
}
day
}
new_activity$day <- return_day(new_activity$date)
head(new_activity)
head(new_activity,100)
head(new_activity,200)
new_activity$day
weekdays(new_activity$date)
return_day <- function(date){
day ="weekday"
if(weekdays(date) == "星期六"||weekdays(date) =="星期日"){
day = "weekend"
}
day
}
new_activity$day <- return_day(new_activity$date)
new_activity$day
nreturn_day(new_activity$date)
return_day(new_activity$date)
?transform
return_day(new_activity$date)
weekdays(new_activity$date)
weekday
weekdays
print(weekdays)
summary(weekdays)
?weekdays
locale
?gsub
?gsub
return_days <- function(dates){
days = dates
number = 0
for(date in dates){
number = number + 1
days[number] = return_day(date)
}
days
}
new_activity$day <- return_days(new_activity$date)
new_activity$date
return_days(new_activity$date)
for(date in dates){print(weekdays(date))}
for(date in new_activity$dates){print(weekdays(date))}
for(date in new_activity$dates){print(weekdays(date))}
for(date in new_activity$dates){print(weekdays(date))}
weekdays(new_activity$dates)
weekdays(new_activity$dates)
new_activity$dates
new_activity$date
new_activity$day <- return_days(new_activity$date)
weekdays(new_activity$date)
new_activity$day <- return_days(new_activity$date)
days[number]
new_activity$day <- return_days(new_activity$date)
days[number] = return_day(date)
}
days
return_days <- function(dates){
days = dates
number = 0
for(date in dates){
number = number + 1
days[number] = return_day(date)
}
}
return_days(new_activity$date)
dates <- new_activity$date
for(date in dates){ print(date)}
dates
date
class(dates)
length(dates)
dates[3]
return_days <- function(dates){
return_days <- function(dates){
days = dates
number = 0
for(number in length(dates){
days[number] = return_day(dates[number])
}
}
return_days <- function(dates){
days = dates
number = 0
for(number in length(dates){
days[number] = return_day(dates[number])
}
}
return_days <- function(dates){
days = dates
number = 0
for(number in length(dates){
days[number] = return_day(dates[number])
}
days
}
return_days <- function(dates){
days = dates
number = 0
for(number in length(dates){
days[number] = return_day(dates[number])
}
days
}
return_days <- function(dates){
days = dates
for(number in length(dates){
days[number] = return_day(dates[number])
}
days
}
return_days <- function(dates){
days = dates
for(number in length(dates){
## days[number] = return_day(dates[number])
}
days
}
return_days <- function(dates){
days = dates
##for(number in length(dates){
## days[number] = return_day(dates[number])
##}
days
}
return_days <- function(dates){
days = dates
for(number in length(dates)){
days[number] = return_day(dates[number])
}
days
}
new_activity$day <- return_days(new_activity$date)
return_days <- function(dates){
##days = dates
for(number in length(dates)){
days[number] = return_day(dates[number])
}
days
}
new_activity$day <- return_days(new_activity$date)
return_days <- function(dates){
days = ""
for(number in length(dates)){
days[number] = return_day(dates[number])
}
days
}
new_activity$day <- return_days(new_activity$date)
new_activity$day
for(numer in length(new_activity$dates)){ print(number)}
for(number in length(new_activity$dates)){ print(number)}
for(number in length(new_activity$dates)){ print(number)}
length(new_activity$dates)
for(number in 1:length(new_activity$dates)){ print(number)}
length(new_activity#dates)
;
length(new_activity$dates)
length(new_activity$date)
for(numer in length(new_activity$date)){ print(number)}
for(number in length(new_activity$date)){ print(number)}
for(number in 1:length(new_activity$date)){ print(number)}
return_days <- function(dates){
days = ""
for(number in 1:length(dates)){
days[number] = return_day(dates[number])
}
days
}
new_activity$day <- return_days(new_activity$date)
new_activity$day
new_activity$day <- return_days(new_activity$date)
as.factor(new_activity$day)
new_activity$day <- as.factor(return_days(new_activity$date))
names(new_activity)
new_average_steps_interval <- ddply(new_activity, .(interval,day), summarize, mean = mean(steps, na.rm=TRUE)
)
new_average_steps_interval
?subset
new_average_steps_interval_weekday <- subset(new_average_steps_interval, day = "weekday")
new_average_steps_interval_weekend <- subset(new_average_steps_interval, day = "weekend")
new_average_steps_interval_weekday
new_average_steps_interval_weekday
new_average_steps_interval_weekday <- subset(new_average_steps_interval, day == "weekday")
new_average_steps_interval_weekend <- subset(new_average_steps_interval, day == "weekend")
new_average_steps_interval_weekday
?plot
require(lattic)
require(lattice)
?xyplot
names(new_average_steps_interval)
xyplot(mean~interval|day , data=new_average_steps_interval)
xyplot(mean~interval|day , data=new_average_steps_interval, type="l")
?xyplot
xyplot(mean~interval|day , data=new_average_steps_interval, type="l",horizontal=TRUE)
xyplot(mean~interval|day , data=new_average_steps_interval, type="l",horizontal=FALSE)
xyplot(mean~interval|day , data=new_average_steps_interval, type="l")
xyplot(mean~interval|day , data=new_average_steps_interval, type="l",ylab="number of steps")
return_days
new_activity$day <- as.factor(return_days(new_activity$date))
return_day <- function(date){
day ="weekday"
if(weekdays(date) == "星期六"||weekdays(date) =="星期日"){
day = "weekend"
}
day
}
return_days <- function(dates){
days = ""
for(number in 1:length(dates)){
days[number] = return_day(dates[number])
}
days
}
new_activity$day <- as.factor(return_days(new_activity$date))
new_activity$date
xyplot(mean~interval|day , data=new_average_steps_interval, type="l",ylab="number of steps")
xyplot(mean~interval|day , data=new_average_steps_interval, type="l",ylab="number of steps")
new_average_steps_interval
xyplot
?xyplot
knit2html("PA1_template.Rmd")
library(knitr)(
knit2html("PA1_template.Rmd")
)
library(knitr)
knit2html("PA1_template.Rmd")
dir()
